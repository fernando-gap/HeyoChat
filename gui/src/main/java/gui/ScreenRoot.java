/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.util.ArrayList;
import java.awt.Button;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.Box;
import java.util.HashMap;

import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.SwingUtilities;
import javax.swing.JOptionPane;

import shared.client.Message;
import shared.client.User;
import shared.communication.Action;
import shared.communication.Receiver;
import shared.communication.Response;
import shared.communication.Sender;

/**
 *
 * @author god
 */
public class ScreenRoot extends javax.swing.JFrame {

    /**
     * Creates new form TestJFrame
     */
    public ScreenRoot(Socket socket) throws IOException {
        this.socket = socket;
        chat = new HashMap<>();
        InputStream in = socket.getInputStream();
        server = new MessageFromServer(in);
        server.setRoot(this);
        serverThread = new Thread(server);

        screenAuth = new ScreenAuthentication();
        screenChat = new ScreenChat();

        screenAuth.setRoot(this);
        screenChat.setRoot(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        removeUserDialog = new javax.swing.JDialog();
        jLabel3 = new javax.swing.JLabel();
        RemoveUserDialogTextField = new javax.swing.JTextField();
        RemoveUserDialogButton = new javax.swing.JButton();
        statusRemoveUserDialogLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cancelRemoveUserDialogButton = new javax.swing.JButton();
        addUserDialog = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        addUserDialogTextField = new javax.swing.JTextField();
        addUserDialogButton = new javax.swing.JButton();
        statusAddUserDialogLabel = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cancelAddUserDialogButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        addUserDialogTextArea = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        emojiDialog = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        contactList = new javax.swing.JList<>();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        boxPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        sendFileButton = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        messageTextArea = new javax.swing.JTextArea();
        sendButton = new javax.swing.JButton();
        emojiButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        jLabel3.setText("Username");

        RemoveUserDialogTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveUserDialogTextFieldActionPerformed(evt);
            }
        });

        RemoveUserDialogButton.setText("Remove");
        RemoveUserDialogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveUserDialogButtonActionPerformed(evt);
            }
        });

        statusRemoveUserDialogLabel1.setEnabled(false);

        jLabel4.setText("Remove User");

        cancelRemoveUserDialogButton.setText("Cancel");
        cancelRemoveUserDialogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelRemoveUserDialogButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout removeUserDialogLayout = new javax.swing.GroupLayout(removeUserDialog.getContentPane());
        removeUserDialog.getContentPane().setLayout(removeUserDialogLayout);
        removeUserDialogLayout.setHorizontalGroup(
            removeUserDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(removeUserDialogLayout.createSequentialGroup()
                .addGroup(removeUserDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(removeUserDialogLayout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addGroup(removeUserDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(statusRemoveUserDialogLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(removeUserDialogLayout.createSequentialGroup()
                                .addGroup(removeUserDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(removeUserDialogLayout.createSequentialGroup()
                                        .addComponent(cancelRemoveUserDialogButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(RemoveUserDialogButton))
                                    .addGroup(removeUserDialogLayout.createSequentialGroup()
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(RemoveUserDialogTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(12, 12, 12))))
                    .addGroup(removeUserDialogLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel4)))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        removeUserDialogLayout.setVerticalGroup(
            removeUserDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(removeUserDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4)
                .addGap(90, 90, 90)
                .addGroup(removeUserDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(RemoveUserDialogTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(removeUserDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(RemoveUserDialogButton)
                    .addComponent(cancelRemoveUserDialogButton))
                .addGap(35, 35, 35)
                .addComponent(statusRemoveUserDialogLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(52, Short.MAX_VALUE))
        );

        jLabel1.setText("Username");

        addUserDialogTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserDialogTextFieldActionPerformed(evt);
            }
        });

        addUserDialogButton.setText("Add");
        addUserDialogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserDialogButtonActionPerformed(evt);
            }
        });

        statusAddUserDialogLabel.setEnabled(false);

        jLabel2.setText("Add User");

        cancelAddUserDialogButton.setText("Cancel");
        cancelAddUserDialogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelAddUserDialogButtonActionPerformed(evt);
            }
        });

        addUserDialogTextArea.setColumns(20);
        addUserDialogTextArea.setRows(5);
        jScrollPane3.setViewportView(addUserDialogTextArea);

        jLabel5.setText("Message");

        javax.swing.GroupLayout addUserDialogLayout = new javax.swing.GroupLayout(addUserDialog.getContentPane());
        addUserDialog.getContentPane().setLayout(addUserDialogLayout);
        addUserDialogLayout.setHorizontalGroup(
            addUserDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addUserDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addUserDialogLayout.createSequentialGroup()
                .addGap(0, 78, Short.MAX_VALUE)
                .addGroup(addUserDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(statusAddUserDialogLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(addUserDialogLayout.createSequentialGroup()
                        .addComponent(cancelAddUserDialogButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addUserDialogButton))
                    .addGroup(addUserDialogLayout.createSequentialGroup()
                        .addGroup(addUserDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addUserDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 257, Short.MAX_VALUE)
                            .addComponent(addUserDialogTextField))))
                .addGap(68, 68, 68))
        );
        addUserDialogLayout.setVerticalGroup(
            addUserDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addUserDialogLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addGap(33, 33, 33)
                .addGroup(addUserDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(addUserDialogTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(addUserDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(addUserDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addUserDialogButton)
                    .addComponent(cancelAddUserDialogButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(statusAddUserDialogLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jScrollPane2.setPreferredSize(new java.awt.Dimension(300, 300));

        jPanel3.setPreferredSize(new java.awt.Dimension(0, 500));
        jPanel3.setLayout(new java.awt.GridLayout(0, 3));
        jScrollPane2.setViewportView(jPanel3);

        emojiDialog.getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setDividerSize(3);

        contactList.setModel(new DefaultListModel<String>());
        contactList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                contactListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(contactList);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jScrollPane6.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane6.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane6.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane6.setHorizontalScrollBar(null);
        jScrollPane6.setPreferredSize(new java.awt.Dimension(2, 600));

        boxPanel.setAutoscrolls(true);
        boxPanel.setPreferredSize(new java.awt.Dimension(0, 5000));
        boxPanel.setLayout(new javax.swing.BoxLayout(boxPanel, javax.swing.BoxLayout.PAGE_AXIS));
        jScrollPane6.setViewportView(boxPanel);

        jPanel1.add(jScrollPane6, java.awt.BorderLayout.CENTER);

        sendFileButton.setText("File");
        sendFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendFileButtonActionPerformed(evt);
            }
        });

        messageTextArea.setColumns(20);
        messageTextArea.setRows(5);
        jScrollPane4.setViewportView(messageTextArea);

        sendButton.setText("Enviar");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        emojiButton.setText("Emojis");
        emojiButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emojiButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(65, 65, 65)
                .addComponent(sendFileButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(emojiButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 24, Short.MAX_VALUE)
                .addComponent(sendButton)
                .addGap(69, 69, 69))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(sendFileButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(emojiButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(sendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(26, 26, 26))
        );

        jPanel1.add(jPanel2, java.awt.BorderLayout.SOUTH);

        jSplitPane1.setRightComponent(jPanel1);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("User");

        jMenuItem1.setText("Add User");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Remove User");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Group");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void emojiButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_emojiButtonActionPerformed
        // TODO add your handling code here:
        emojiDialog.pack();
        emojiDialog.setVisible(true);
    }//GEN-LAST:event_emojiButtonActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        addUserDialog.pack();
        addUserDialog.setVisible(true);
    }// GEN-LAST:event_jMenuItem1ActionPerformed

    private void addUserDialogTextFieldActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addUserDialogTextFieldActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_addUserDialogTextFieldActionPerformed

    private void cancelAddUserDialogButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cancelAddUserDialogButtonActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_cancelAddUserDialogButtonActionPerformed

    private void RemoveUserDialogTextFieldActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_RemoveUserDialogTextFieldActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_RemoveUserDialogTextFieldActionPerformed

    private void cancelRemoveUserDialogButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cancelRemoveUserDialogButtonActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_cancelRemoveUserDialogButtonActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        removeUserDialog.pack();
        removeUserDialog.setVisible(true);
    }// GEN-LAST:event_jMenuItem2ActionPerformed

    private void RemoveUserDialogButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_RemoveUserDialogButtonActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_RemoveUserDialogButtonActionPerformed

    private void addUserDialogButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addUserDialogButtonActionPerformed
        // TODO add your handling code here:
        String name = addUserDialogTextField.getText();
        String textArea = addUserDialogTextArea.getText();

        statusAddUserDialogLabel.setVisible(false);

        if (name.equals("")) {
            statusAddUserDialogLabel.setText("Username can't be empty.");
            statusAddUserDialogLabel.setVisible(true);
            return;
        }

        if (textArea.equals("")) {
            statusAddUserDialogLabel.setText("Message can't be empty");
            statusAddUserDialogLabel.setVisible(true);
            return;
        }

        try {
            if (isAuthorized) {
                Sender<Message> sender = new Sender<>(currentUser.getName(), name, Action.ADD_USER_CONTACT);
                sender.appendData(new Message(textArea, currentUser.getName(), name));
                ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
                out.writeObject(sender);
            } else {
                statusAddUserDialogLabel.setText("Forbidden.");
                statusAddUserDialogLabel.setVisible(true);
                return;
            }
        } catch (IOException e) {
            statusAddUserDialogLabel.setEnabled(true);
            statusAddUserDialogLabel.setVisible(true);
            statusAddUserDialogLabel.setText("[ERROR]: " + e.toString());
        }

    }// GEN-LAST:event_addUserDialogButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_sendButtonActionPerformed
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                MessageComponent messageComponent = new MessageComponent(messageTextArea.getText(), false);
                try {
                    String name = contactList.getSelectedValue();

                    if (name.equals(currentUser.getName() + " (you)")) {
                        name = currentUser.getName();
                    }

                    Sender<Message> sender = new Sender<>(currentUser.getName(), name, Action.SEND_USER2USER);
                    Message m = new Message(messageTextArea.getText(), currentUser.getName(), name);
                    sender.appendData(m);
                    ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
                    out.writeObject(sender);
                    if (!name.equals(currentUser.getName())) {
                        boxPanel.add(messageComponent);
                        boxPanel.add(Box.createRigidArea(new Dimension(0, 8)));
                        ArrayList<Message> c = chat.get(name);
                        c.add(m);
                    }
                } catch (IOException e) {
                    System.err.println(e);
                    return;
                }

                boxPanel.revalidate();
                boxPanel.repaint();
                pack();
            }
        });
    }

    // GEN-LAST:event_sendButtonActionPerformed

    private void sendEmojiButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_sendEmojiButtonActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_sendEmojiButtonActionPerformed

    private void sendFileButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_sendFileButtonActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_sendFileButtonActionPerformed

    private void contactListValueChanged(javax.swing.event.ListSelectionEvent evt) {// GEN-FIRST:event_contactListValueChanged
        if (evt.getValueIsAdjusting())
            return;

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                boxPanel.removeAll();
                String userSelected = contactList.getSelectedValue();

                if (userSelected.equals(currentUser.getName() + " (you)")) {
                    userSelected = currentUser.getName();
                }

                ArrayList<Message> history = chat.get(userSelected);

                for (Message m : history) {
                    MessageComponent mc;

                    if (m.getSenderName().equals(userSelected)) {
                        mc = new MessageComponent(m.getMessage(), false);
                    } else {
                        mc = new MessageComponent(m.getMessage(), true);
                    }
                    boxPanel.add(mc);
                    boxPanel.add(Box.createRigidArea(new Dimension(0, 5)));
                }
                boxPanel.revalidate();
                boxPanel.repaint();
                pack();
            }
        });
    }// GEN-LAST:event_contactListValueChanged

    public void start() {
        System.out.println("hello");
        serverThread.start();
        add(screenAuth);
        System.out.println(jPanel3);
        pack();
        setVisible(true);
        System.out.println("bye");
    }

    public Socket getSocket() {
        return socket;
    }

    public void handleUpdate(Receiver<?> receiver) {
        if (receiver.getResponse() != Response.ERROR) {
            switch (receiver.getAction()) {
                case SIGN_IN:
                    handleLogin(receiver);
                    break;
                case ADD_USER_CONTACT:
                    handleAddContactList(receiver.getArrayList());
                    break;
                case GET_ALL_USER_CONTACTS:
                    handleAllContactList(receiver.getArrayList());
                    break;
                case SEND_USER2USER:
                    System.err.println(
                            receiver.getErrorMessage() + " " + receiver.getAction() + " " + receiver.getResponse());
                    if (receiver.getResponse() == Response.MESSAGE) {
                        handleMessageFromUser(receiver);
                    } else {
                        System.out.println("[STATUS] Message was " + (String) receiver.getData(0));
                    }
                    break;
                case GET_MESSAGES:
                    if (receiver.getResponse() == Response.MESSAGE) {
                        handleNewMessages(receiver);
                    }
            }
        } else {
            System.err.println("ERROR. UNFORTUNATELY: " + receiver.getErrorMessage());
        }
    }

    // mensagems enviadas mas nao recebidas
    private void handleNewMessages(Receiver<?> receiver) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                for (Object o : receiver.getArrayList()) {
                    Message newMessage = (Message) o;
                    if (newMessage == null)
                        return;

                    String selectedReceiver = contactList.getSelectedValue();
                    if (selectedReceiver.equals(currentUser.getName() + " (you)")) {
                        selectedReceiver = currentUser.getName();
                    }

                    MessageComponent m;
                    /* adiciona mensagem a um chat */
                    if (newMessage.getSenderName().equals(currentUser.getName())) {
                        /* sender, portanto, adiciona ao chat receiver */
                        ArrayList<Message> contact = chat.get(newMessage.getReceiverName());
                        m = new MessageComponent(newMessage.getMessage(), false);
                        contact.add(newMessage);

                        if (selectedReceiver.equals(newMessage.getReceiverName())) {
                            boxPanel.add(m);
                            boxPanel.add(Box.createRigidArea(new Dimension(0, 5)));
                            boxPanel.revalidate();
                            boxPanel.repaint();
                            pack();
                        }
                    } else {
                        /* nao sender, mas receiver (que enviou) */
                        ArrayList<Message> contact = chat.get(newMessage.getSenderName());
                        m = new MessageComponent(newMessage.getMessage(), true);
                        contact.add(newMessage);

                        if (selectedReceiver.equals(newMessage.getSenderName())) {
                            boxPanel.add(m);
                            boxPanel.add(Box.createRigidArea(new Dimension(0, 5)));
                            boxPanel.revalidate();
                            boxPanel.repaint();
                            pack();
                        }
                    }

                    // if (selectedReceiver.equals(newMessage.getReceiverName()) ||
                    // selectedReceiver.equals(newMessage.getSenderName())) {
                    // boxPanel.add(m);
                    // boxPanel.add(Box.createRigidArea(new Dimension(0, 5)));
                    // boxPanel.revalidate();
                    // boxPanel.repaint();
                    // pack();
                    // }
                }
            }
        });
    }

    private void handleMessageFromUser(Receiver<?> receiver) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                Message message = (Message) receiver.getData(0);
                MessageComponent m = new MessageComponent(message.getMessage(), true);

                if (contactList.getSelectedValue().equals(receiver.getSenderName())) {
                    boxPanel.add(m);
                    boxPanel.add(Box.createRigidArea(new Dimension(0, 5)));
                    boxPanel.revalidate();
                    boxPanel.repaint();
                    pack();
                }
                ArrayList<Message> c = chat.get(receiver.getSenderName());
                c.add(message);
            }
        });
    }

    private void handleLogin(Receiver<?> receiver) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                if (isAuthorized) {
                    return;
                }

                try {
                    currentUser = (User) receiver.getData(0);
                    ObjectOutputStream objectOut = new ObjectOutputStream(socket.getOutputStream());
                    objectOut.writeObject(new Sender<>(Action.GET_ALL_USER_CONTACTS, currentUser.getName()));
                    isAuthorized = true;
                    remove(screenAuth);
                    initComponents();
                    for (String emoji : emojis) {
                        JButton e = new JButton(emoji);
                        e.setSize(new Dimension(20, 20));
                        e.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 30));
                        e.addActionListener(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent arg0) {
                                JButton b = (JButton) arg0.getSource();
                                messageTextArea.setText((messageTextArea.getText() + b.getText()));
                                emojiDialog.setVisible(false);
                            }
                        });
                        jPanel3.add(e);
                    }
                } catch (IOException e) {
                    isAuthorized = false;
                    currentUser = null;
                    JOptionPane.showMessageDialog(null, "Cannot load contacts.", "Contacts", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }

    private void handleAllContactList(ArrayList<?> contacts) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                DefaultListModel<String> list = (DefaultListModel<String>) contactList.getModel();
                for (Object contact : contacts) {
                    String username = (String) contact;
                    if (contact.equals(currentUser.getName())) {
                        list.addElement(username + " (you)");
                    } else {
                        list.addElement(username);
                    }
                    chat.put(username, new ArrayList<Message>());
                }
                try {
                    if (isAuthorized) {
                        contactList.setSelectedIndex(0);
                        Sender<Integer> sender = new Sender<>(currentUser.getName(), null, Action.GET_MESSAGES);
                        sender.appendData(contacts.size());
                        ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
                        out.writeObject(sender);
                    }
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Cannot load Messages.", "Messages",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }

    private void handleAddContactList(ArrayList<?> contacts) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                DefaultListModel<String> list = (DefaultListModel<String>) contactList.getModel();
                for (Object contact : contacts) {
                    String username = (String) contact;
                    if (contact.equals(currentUser.getName())) {
                        list.addElement(username + " (you)");
                    } else {
                        list.addElement(username);
                    }
                    chat.put(username, new ArrayList<Message>());
                }

                if (contactList.getSelectedIndex() == -1) {
                    contactList.setSelectedIndex(0);
                }
            }
        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    Socket socket = new Socket("localhost", 5000);
                    ScreenRoot root = new ScreenRoot(socket);
                    root.start();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
        });
    }

    private Socket socket;
    private MessageFromServer server;
    private Thread serverThread;
    private ScreenAuthentication screenAuth;
    private ScreenChat screenChat;
    private User currentUser;
    private boolean isAuthorized = false;
    private HashMap<String, ArrayList<Message>> chat;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton RemoveUserDialogButton;
    private javax.swing.JTextField RemoveUserDialogTextField;
    private javax.swing.JDialog addUserDialog;
    private javax.swing.JButton addUserDialogButton;
    private javax.swing.JTextArea addUserDialogTextArea;
    private javax.swing.JTextField addUserDialogTextField;
    private javax.swing.JPanel boxPanel;
    private javax.swing.JButton cancelAddUserDialogButton;
    private javax.swing.JButton cancelRemoveUserDialogButton;
    private javax.swing.JList<String> contactList;
    private javax.swing.JButton emojiButton;
    private javax.swing.JDialog emojiDialog;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextArea messageTextArea;
    private javax.swing.JDialog removeUserDialog;
    private javax.swing.JButton sendButton;
    private javax.swing.JButton sendFileButton;
    private javax.swing.JLabel statusAddUserDialogLabel;
    private javax.swing.JLabel statusRemoveUserDialogLabel1;
    // End of variables declaration//GEN-END:variables

    public String[] emojis = {
            "😀","😃", "😄", "😁", "😆", "😅", "😂", "🙃", "😉", "😊", "😇", "😍", "😘",
             "😗", "😚", "😙", "😋", "😛", "😜", "😝",
             "😐", "😑", "😶", "😶‍🌫️", "😏", "😒", "😮‍💨", "😌",
             "😔", "😪", "😴", "😷", "😵", "😵‍💫",
             "😎", "😕", "😟", "😮", "😯", "😲", "😳", "😦", "😧",
             "😨", "😰", "😥", "😢", "😭", "😱", "😖", "😣", "😞", "😓", "😩", "😫", "😡", "😠", "😈",
             "👽", "😺", "😸", "😹", "😻", "😼", "😽", "🙀",
             "😿", "😾", "❤",
    };
}
