/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package gui;

import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectOutputStream;
import java.net.Socket;
import java.nio.file.Files;
import java.util.ArrayList;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.Box;
import java.util.HashMap;

import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.SwingUtilities;
import javax.swing.JOptionPane;

import shared.client.Message;
import shared.client.User;
import shared.communication.Action;
import shared.communication.Receiver;
import shared.communication.Response;
import shared.communication.Sender;

/**
 *
 * @author god
 */
public class ScreenRoot extends javax.swing.JFrame {

    /**
     * Creates new form TestJFrame
     */
    public ScreenRoot(Socket socket) throws IOException {
        this.socket = socket;
        chat = new HashMap<>();
        InputStream in = socket.getInputStream();
        server = new MessageFromServer(in);
        server.setRoot(this);
        serverThread = new Thread(server);

        screenAuth = new ScreenAuthentication();
        screenChat = new ScreenChat();

        screenAuth.setRoot(this);
        screenChat.setRoot(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        removeUserDialog = new javax.swing.JDialog();
        statusRemoveUserDialogLabel1 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        removeUserButton = new javax.swing.JButton();
        cancelRemoveButtonUser = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        removeUserDialogTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        addUserDialog = new javax.swing.JDialog();
        jPanel5 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        addUserDialogTextField = new javax.swing.JTextField();
        jPanel6 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        addUserDialogTextArea = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        addUserDialogButton = new javax.swing.JButton();
        cancelAddUserDialogButton = new javax.swing.JButton();
        statusAddUserDialogLabel = new javax.swing.JLabel();
        emojiDialog = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel3 = new javax.swing.JPanel();
        jFileChooser = new javax.swing.JFileChooser();
        createGroupDialog = new javax.swing.JDialog();
        jPanel13 = new javax.swing.JPanel();
        jTextField1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jPanel14 = new javax.swing.JPanel();
        cancelCreateGroupButtonDialog = new javax.swing.JButton();
        createGroupButtonDialog = new javax.swing.JButton();
        renameViewGroupDialog = new javax.swing.JDialog();
        jPanel9 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jTextField6 = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        cancelCreateGroupButtonDialog2 = new javax.swing.JButton();
        createGroupButtonDialog2 = new javax.swing.JButton();
        jPanel15 = new javax.swing.JPanel();
        jTextField7 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        cancelCreateGroupButtonDialog3 = new javax.swing.JButton();
        createGroupButtonDialog3 = new javax.swing.JButton();
        jPanel16 = new javax.swing.JPanel();
        jTextField8 = new javax.swing.JTextField();
        jLabel15 = new javax.swing.JLabel();
        cancelCreateGroupButtonDialog4 = new javax.swing.JButton();
        createGroupButtonDialog4 = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        contactList = new javax.swing.JList<>();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        boxPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        messageTextArea = new javax.swing.JTextArea();
        sendButton = new javax.swing.JButton();
        emojiButton = new javax.swing.JButton();
        sendFileButton = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        statusRemoveUserDialogLabel1.setEnabled(false);
        removeUserDialog.getContentPane().add(statusRemoveUserDialogLabel1, java.awt.BorderLayout.LINE_START);

        removeUserButton.setText("Remove");
        removeUserButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeUserButtonActionPerformed(evt);
            }
        });

        cancelRemoveButtonUser.setText("Cancel");
        cancelRemoveButtonUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelRemoveButtonUserActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap(104, Short.MAX_VALUE)
                .addComponent(cancelRemoveButtonUser)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeUserButton)
                .addContainerGap())
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeUserButton)
                    .addComponent(cancelRemoveButtonUser))
                .addContainerGap())
        );

        removeUserDialog.getContentPane().add(jPanel11, java.awt.BorderLayout.PAGE_END);

        jPanel12.setPreferredSize(new java.awt.Dimension(200, 62));

        removeUserDialogTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeUserDialogTextFieldActionPerformed(evt);
            }
        });

        jLabel3.setText("Username");

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(removeUserDialogTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeUserDialogTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        removeUserDialog.getContentPane().add(jPanel12, java.awt.BorderLayout.CENTER);

        jLabel1.setText("Username");
        jPanel5.add(jLabel1);

        addUserDialogTextField.setColumns(20);
        addUserDialogTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserDialogTextFieldActionPerformed(evt);
            }
        });
        jPanel5.add(addUserDialogTextField);

        addUserDialog.getContentPane().add(jPanel5, java.awt.BorderLayout.CENTER);

        addUserDialogTextArea.setColumns(20);
        addUserDialogTextArea.setRows(5);
        jScrollPane3.setViewportView(addUserDialogTextArea);

        jLabel5.setText("Message");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel6.add(jPanel4);

        jPanel10.setLayout(new java.awt.GridLayout(2, 0, 0, 10));

        addUserDialogButton.setText("Add");
        addUserDialogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addUserDialogButtonActionPerformed(evt);
            }
        });
        jPanel10.add(addUserDialogButton);

        cancelAddUserDialogButton.setText("Cancel");
        cancelAddUserDialogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelAddUserDialogButtonActionPerformed(evt);
            }
        });
        jPanel10.add(cancelAddUserDialogButton);

        jPanel6.add(jPanel10);

        addUserDialog.getContentPane().add(jPanel6, java.awt.BorderLayout.SOUTH);
        addUserDialog.getContentPane().add(statusAddUserDialogLabel, java.awt.BorderLayout.PAGE_START);

        jScrollPane2.setPreferredSize(new java.awt.Dimension(300, 300));

        jPanel3.setPreferredSize(new java.awt.Dimension(0, 500));
        jPanel3.setLayout(new java.awt.GridLayout(0, 3));
        jScrollPane2.setViewportView(jPanel3);

        emojiDialog.getContentPane().add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jLabel7.setText("Group Name");

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel13Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        createGroupDialog.getContentPane().add(jPanel13, java.awt.BorderLayout.CENTER);

        cancelCreateGroupButtonDialog.setText("Cancel");

        createGroupButtonDialog.setText("Create");

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap(136, Short.MAX_VALUE)
                .addComponent(cancelCreateGroupButtonDialog)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(createGroupButtonDialog)
                .addContainerGap())
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel14Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createGroupButtonDialog)
                    .addComponent(cancelCreateGroupButtonDialog))
                .addContainerGap())
        );

        createGroupDialog.getContentPane().add(jPanel14, java.awt.BorderLayout.SOUTH);

        jLabel8.setText("Group Name");
        jPanel9.add(jLabel8);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel9.add(jComboBox1);

        renameViewGroupDialog.getContentPane().add(jPanel9, java.awt.BorderLayout.PAGE_START);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane5.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("View", jPanel8);

        jLabel13.setText("New Name");

        cancelCreateGroupButtonDialog2.setText("Cancel");

        createGroupButtonDialog2.setText("Rename");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(cancelCreateGroupButtonDialog2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(createGroupButtonDialog2))
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel13)))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel13)
                .addGap(5, 5, 5)
                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(createGroupButtonDialog2)
                    .addComponent(cancelCreateGroupButtonDialog2))
                .addContainerGap(109, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Rename", jPanel7);

        jLabel14.setText("Username");

        cancelCreateGroupButtonDialog3.setText("Cancel");

        createGroupButtonDialog3.setText("Add");

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addComponent(cancelCreateGroupButtonDialog3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(createGroupButtonDialog3))
                    .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel14)))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel14)
                .addGap(5, 5, 5)
                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(createGroupButtonDialog3)
                    .addComponent(cancelCreateGroupButtonDialog3))
                .addContainerGap(109, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Add User", jPanel15);

        jLabel15.setText("Username");

        cancelCreateGroupButtonDialog4.setText("Cancel");

        createGroupButtonDialog4.setText("Remove");

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(58, 58, 58)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel16Layout.createSequentialGroup()
                        .addComponent(cancelCreateGroupButtonDialog4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(createGroupButtonDialog4))
                    .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel15)))
                .addContainerGap(61, Short.MAX_VALUE))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel16Layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(jLabel15)
                .addGap(5, 5, 5)
                .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(createGroupButtonDialog4)
                    .addComponent(cancelCreateGroupButtonDialog4))
                .addContainerGap(109, Short.MAX_VALUE))
        );

        jTabbedPane3.addTab("Remove User", jPanel16);

        renameViewGroupDialog.getContentPane().add(jTabbedPane3, java.awt.BorderLayout.CENTER);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Heyo");
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        setPreferredSize(new java.awt.Dimension(1024, 768));

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setDividerSize(3);

        contactList.setModel(new DefaultListModel<String>());
        contactList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                contactListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(contactList);

        jSplitPane1.setLeftComponent(jScrollPane1);

        jPanel1.setLayout(new java.awt.BorderLayout());

        jScrollPane6.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane6.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane6.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane6.setHorizontalScrollBar(null);
        jScrollPane6.setPreferredSize(new java.awt.Dimension(2, 600));

        boxPanel.setAutoscrolls(true);
        boxPanel.setPreferredSize(new java.awt.Dimension(0, 5000));
        boxPanel.setLayout(new javax.swing.BoxLayout(boxPanel, javax.swing.BoxLayout.PAGE_AXIS));
        jScrollPane6.setViewportView(boxPanel);

        jPanel1.add(jScrollPane6, java.awt.BorderLayout.CENTER);

        messageTextArea.setColumns(20);
        messageTextArea.setRows(5);
        jScrollPane4.setViewportView(messageTextArea);

        sendButton.setText("Enviar");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        emojiButton.setText("Emojis");
        emojiButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                emojiButtonActionPerformed(evt);
            }
        });

        sendFileButton.setText("File");
        sendFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendFileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(sendFileButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(emojiButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 435, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 48, Short.MAX_VALUE)
                .addComponent(sendButton)
                .addGap(69, 69, 69))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sendFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel2Layout.createSequentialGroup()
                        .addComponent(emojiButton, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(sendButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(26, 26, 26))
        );

        jPanel1.add(jPanel2, java.awt.BorderLayout.SOUTH);

        jSplitPane1.setRightComponent(jPanel1);

        getContentPane().add(jSplitPane1, java.awt.BorderLayout.CENTER);

        jMenu1.setText("User");

        jMenuItem1.setText("Add User");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Remove User");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Group");

        jMenuItem3.setText("Create Group");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("View Group");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void removeUserButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeUserButtonActionPerformed
        String s = removeUserDialogTextField.getText();
        if (s.equals(currentUser.getName())) {
            s = currentUser.getName() + " (you)";
        }
        ArrayList<MessageComponent> c = chat.remove(s);
        if (c == null) {
            System.err.println("no contact found to remove");
        }

        DefaultListModel<String> list = (DefaultListModel<String>) contactList.getModel();
        list.removeElement(s);
        contactList.setSelectedIndex(0);
    }//GEN-LAST:event_removeUserButtonActionPerformed

    private void cancelRemoveButtonUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelRemoveButtonUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cancelRemoveButtonUserActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
        renameViewGroupDialog.setVisible(true);
        renameViewGroupDialog.pack();
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        createGroupDialog.setVisible(true);
        createGroupDialog.pack();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void emojiButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_emojiButtonActionPerformed
        emojiDialog.pack();
        emojiDialog.setVisible(true);
    }// GEN-LAST:event_emojiButtonActionPerformed

    private void sendFileButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_sendFileButtonActionPerformed
        if (jFileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            File file = jFileChooser.getSelectedFile();
            String receiverName = contactList.getSelectedValue();
            if (receiverName.equals(currentUser.getName() + " (you)")) {
                receiverName = currentUser.getName();
            }

            try {
                Message message = new Message("You sent the file " + file.getName() + " of size " + file.length() + " bytes.");
                MessageComponent m = new MessageComponent(message, false);
                ArrayList<MessageComponent> history = chat.get(currentUser.getName());
                if (history == null) {
                    ArrayList<MessageComponent> h = new ArrayList<>();
                    h.add(m);
                } else {
                    history.add(m);
                }
                boxPanel.add(m);
                boxPanel.add(Box.createRigidArea(new Dimension(0, 8)));

                byte[] fileData = Files.readAllBytes(file.toPath());
                Sender<String> sender = new Sender<String>(fileData, currentUser.getName(),
                        receiverName, Action.SEND_FILE2USER);
                sender.appendData(file.getName());
                ObjectOutputStream objectOut = new ObjectOutputStream(socket.getOutputStream());
                objectOut.writeObject(sender);

            } catch (IOException e) {
                System.err.println(e);
            }
        }
    }// GEN-LAST:event_sendFileButtonActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        addUserDialog.pack();
        addUserDialog.setVisible(true);
    }// GEN-LAST:event_jMenuItem1ActionPerformed

    private void addUserDialogTextFieldActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addUserDialogTextFieldActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_addUserDialogTextFieldActionPerformed

    private void cancelAddUserDialogButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cancelAddUserDialogButtonActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_cancelAddUserDialogButtonActionPerformed

    private void removeUserDialogTextFieldActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_RemoveUserDialogTextFieldActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_RemoveUserDialogTextFieldActionPerformed

    private void cancelRemoveUserDialogButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cancelRemoveUserDialogButtonActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_cancelRemoveUserDialogButtonActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        removeUserDialog.pack();
        removeUserDialog.setVisible(true);
    }// GEN-LAST:event_jMenuItem2ActionPerformed

    private void RemoveUserDialogButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_RemoveUserDialogButtonActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_RemoveUserDialogButtonActionPerformed

    private void addUserDialogButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_addUserDialogButtonActionPerformed
        // TODO add your handling code here:
        String name = addUserDialogTextField.getText();
        String textArea = addUserDialogTextArea.getText();

        statusAddUserDialogLabel.setVisible(false);

        if (name.equals("")) {
            statusAddUserDialogLabel.setText("Username can't be empty.");
            statusAddUserDialogLabel.setVisible(true);
            return;
        }

        if (textArea.equals("")) {
            statusAddUserDialogLabel.setText("Message can't be empty");
            statusAddUserDialogLabel.setVisible(true);
            return;
        }

        try {
            if (isAuthorized) {
                Sender<Message> sender = new Sender<>(currentUser.getName(), name, Action.ADD_USER_CONTACT);
                sender.appendData(new Message(textArea, currentUser.getName(), name));
                ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
                out.writeObject(sender);
            } else {
                statusAddUserDialogLabel.setText("Forbidden.");
                statusAddUserDialogLabel.setVisible(true);
                return;
            }
        } catch (IOException e) {
            statusAddUserDialogLabel.setEnabled(true);
            statusAddUserDialogLabel.setVisible(true);
            statusAddUserDialogLabel.setText("[ERROR]: " + e.toString());
        }

    }// GEN-LAST:event_addUserDialogButtonActionPerformed

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_sendButtonActionPerformed
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    String name = contactList.getSelectedValue();

                    if (name.equals(currentUser.getName() + " (you)")) {
                        name = currentUser.getName();
                    }

                    Message messageFromSender = new Message(messageTextArea.getText(), currentUser.getName(), name);
                    MessageComponent messageComponent = new MessageComponent(messageFromSender, false);
                    Sender<Message> sender = new Sender<>(currentUser.getName(), name, Action.SEND_USER2USER);
                    sender.appendData(messageFromSender);

                    ArrayList<MessageComponent> c = chat.get(name);
                    c.add(messageComponent);

                    boxPanel.add(messageComponent);
                    boxPanel.add(Box.createRigidArea(new Dimension(0, 8)));
                    ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());

                    out.writeObject(sender);

                } catch (IOException e) {
                    System.err.println(e);
                    return;
                }

                boxPanel.revalidate();
                boxPanel.repaint();
                pack();
            }
        });
    }

    // GEN-LAST:event_sendButtonActionPerformed

    private void sendEmojiButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_sendEmojiButtonActionPerformed
        // TODO add your handling code here:
    }// GEN-LAST:event_sendEmojiButtonActionPerformed

    private void contactListValueChanged(javax.swing.event.ListSelectionEvent evt) {// GEN-FIRST:event_contactListValueChanged
        if (evt.getValueIsAdjusting())
            return;

        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                boxPanel.removeAll();
                String userSelected = contactList.getSelectedValue();

                if (userSelected.equals(currentUser.getName() + " (you)")) {
                    userSelected = currentUser.getName();
                }

                ArrayList<MessageComponent> history = chat.get(userSelected);

                for (MessageComponent mc : history) {
                    boxPanel.add(mc);
                    boxPanel.add(Box.createRigidArea(new Dimension(0, 5)));
                }
                boxPanel.revalidate();
                boxPanel.repaint();
                pack();
            }
        });
    }// GEN-LAST:event_contactListValueChanged

    public void start() {
        System.out.println("hello");
        serverThread.start();
        add(screenAuth);
        System.out.println(jPanel3);
        pack();
        setVisible(true);
        System.out.println("bye");
    }

    public Socket getSocket() {
        return socket;
    }

    public void handleUpdate(Receiver<?> receiver) {
        if (receiver.getResponse() != Response.ERROR) {
            switch (receiver.getAction()) {
                case SIGN_IN:
                    handleLogin(receiver);
                    break;
                case ADD_USER_CONTACT:
                    handleAddContactList(receiver.getArrayList());
                    break;
                case GET_ALL_USER_CONTACTS:
                    handleAllContactList(receiver.getArrayList());
                    break;
                case SEND_USER2USER:
                    System.err.println(
                            receiver.getErrorMessage() + " " + receiver.getAction() + " " + receiver.getResponse());
                    if (receiver.getResponse() == Response.MESSAGE) {
                        handleMessageFromUser(receiver);
                    } else {
                        System.out.println("[STATUS] Message was " + (String) receiver.getData(0));
                    }
                    break;
                case GET_USER_MESSAGES:
                    if (receiver.getResponse() == Response.MESSAGE) {
                        handleNewMessages(receiver);
                    }
                    break;
                case SEND_FILE2USER:
                    if (receiver.getResponse() == Response.MESSAGE) {
                        System.out.println("[FILE RECEIVED]");
                        handleFileSent(receiver);
                    } else if (receiver.getResponse() == Response.STATUS) {
                        System.err.println("STATUS: " + (String) receiver.getData(0));
                    }
                    break;
            }
        } else {
            System.err.println("ERROR. UNFORTUNATELY: " + receiver.getErrorMessage());
        }
    }

    private void handleFileSent(Receiver<?> receiver) {
        byte[] file = receiver.getFileBytes();
        MessageComponent m = new MessageComponent((Message) receiver.getData(0), jFileChooser, this, file);

        String name = contactList.getSelectedValue();
        if (name.equals(currentUser.getName() + " (you)")) {
            name = currentUser.getName();
        }

        if (name.equals(receiver.getSenderName())) {
            boxPanel.add(m);
            boxPanel.add(Box.createRigidArea(new Dimension(0, 5)));
            boxPanel.revalidate();
            boxPanel.repaint();
            pack();
        }
        ArrayList<MessageComponent> c = chat.get(receiver.getSenderName());
        c.add(m);
    }

    // mensagems enviadas mas nao recebidas
    private void handleNewMessages(Receiver<?> receiver) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                for (Object o : receiver.getArrayList()) {
                    Message newMessage = (Message) o;
                    if (newMessage == null)
                        return;
                    
                    String selectedReceiver = contactList.getSelectedValue();
                    if (selectedReceiver.equals(currentUser.getName() + " (you)")) {
                        selectedReceiver = currentUser.getName();
                    }

                    /* adiciona mensagem a um chat */
                    if (newMessage.getSenderName().equals(currentUser.getName())) {
                        /* sender, portanto, adiciona ao chat receiver */
                        ArrayList<MessageComponent> contact = chat.get(newMessage.getReceiverName());
                        MessageComponent m = new MessageComponent(newMessage, false);
                        contact.add(m);

                        if (selectedReceiver.equals(newMessage.getReceiverName())) {
                            boxPanel.add(m);

                            boxPanel.add(Box.createRigidArea(new Dimension(0, 5)));
                            boxPanel.revalidate();
                            boxPanel.repaint();
                            pack();
                        }
                    } else {
                        /* nao sender, mas receiver (que enviou) */
                        ArrayList<MessageComponent> contact = chat.get(newMessage.getSenderName());
                        MessageComponent m = new MessageComponent(newMessage, true);
                        contact.add(m);

                        if (selectedReceiver.equals(newMessage.getSenderName())) {
                            boxPanel.add(m);

                            boxPanel.add(Box.createRigidArea(new Dimension(0, 5)));
                            boxPanel.revalidate();
                            boxPanel.repaint();
                            pack();
                        }
                    }
                }
            }
        });
    }

    private void handleMessageFromUser(Receiver<?> receiver) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                Message message = (Message) receiver.getData(0);
                MessageComponent m = new MessageComponent(message, true);

                if (contactList.getSelectedValue().equals(receiver.getSenderName())) {
                    boxPanel.add(m);

                    boxPanel.add(Box.createRigidArea(new Dimension(0, 5)));
                    boxPanel.revalidate();
                    boxPanel.repaint();
                    pack();
                }

                ArrayList<MessageComponent> c = chat.get(receiver.getSenderName());
                if (c == null) {
                    ArrayList<MessageComponent> newHistory = new ArrayList<>();
                    newHistory.add(m);
                    chat.put(receiver.getSenderName(), newHistory);
                }  else {
                    c.add(m);
                }
            }
        });
    }

    private void handleLogin(Receiver<?> receiver) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                if (isAuthorized) {
                    return;
                }

                try {
                    currentUser = (User) receiver.getData(0);
                    ObjectOutputStream objectOut = new ObjectOutputStream(socket.getOutputStream());
                    objectOut.writeObject(new Sender<>(Action.GET_ALL_USER_CONTACTS, currentUser.getName()));
                    isAuthorized = true;
                    remove(screenAuth);
                    initComponents();
                    for (String emoji : emojis) {
                        JButton e = new JButton(emoji);
                        e.setSize(new Dimension(20, 20));
                        e.setFont(new Font(Font.SANS_SERIF, Font.PLAIN, 30));
                        e.addActionListener(new ActionListener() {
                            @Override
                            public void actionPerformed(ActionEvent arg0) {
                                JButton b = (JButton) arg0.getSource();
                                messageTextArea.setText((messageTextArea.getText() + b.getText()));
                                emojiDialog.setVisible(false);
                            }
                        });
                        jPanel3.add(e);
                    }
                } catch (IOException e) {
                    isAuthorized = false;
                    currentUser = null;
                    JOptionPane.showMessageDialog(null, "Cannot load contacts.", "Contacts", JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }

    private void handleAllContactList(ArrayList<?> contacts) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                DefaultListModel<String> list = (DefaultListModel<String>) contactList.getModel();
                for (Object contact : contacts) {
                    String username = (String) contact;
                    if (contact.equals(currentUser.getName())) {
                        list.addElement(username + " (you)");
                    } else {
                        list.addElement(username);
                    }
                    chat.put(username, new ArrayList<MessageComponent>());
                }
                try {
                    if (isAuthorized) {
                        contactList.setSelectedIndex(0);
                        Sender<Integer> sender = new Sender<>(currentUser.getName(), null, Action.GET_USER_MESSAGES);
                        sender.appendData(contacts.size());
                        ObjectOutputStream out = new ObjectOutputStream(socket.getOutputStream());
                        out.writeObject(sender);
                    }
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(null, "Cannot load Messages.", "Messages",
                            JOptionPane.ERROR_MESSAGE);
                }
            }
        });
    }

    private void handleAddContactList(ArrayList<?> contacts) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                DefaultListModel<String> list = (DefaultListModel<String>) contactList.getModel();
                for (Object contact : contacts) {
                    String username = (String) contact;
                    if (contact.equals(currentUser.getName())) {
                        list.addElement(username + " (you)");
                    } else {
                        list.addElement(username);
                    }
                    chat.put(username, new ArrayList<MessageComponent>());
                }

                if (contactList.getSelectedIndex() == -1) {
                    contactList.setSelectedIndex(0);
                }
            }
        });
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        // System.setProperty("awt.useSystemAAFontSettings","on");
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    Socket socket = new Socket("localhost", 5000);
                    ScreenRoot root = new ScreenRoot(socket);
                    root.start();
                } catch (IOException e) {
                    System.err.println(e);
                }
            }
        });
    }

    private Socket socket;
    private MessageFromServer server;
    private Thread serverThread;
    private ScreenAuthentication screenAuth;
    private ScreenChat screenChat;
    private User currentUser;
    private boolean isAuthorized = false;
    private HashMap<String, ArrayList<MessageComponent>> chat;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog addUserDialog;
    private javax.swing.JButton addUserDialogButton;
    private javax.swing.JTextArea addUserDialogTextArea;
    private javax.swing.JTextField addUserDialogTextField;
    private javax.swing.JPanel boxPanel;
    private javax.swing.JButton cancelAddUserDialogButton;
    private javax.swing.JButton cancelCreateGroupButtonDialog;
    private javax.swing.JButton cancelCreateGroupButtonDialog2;
    private javax.swing.JButton cancelCreateGroupButtonDialog3;
    private javax.swing.JButton cancelCreateGroupButtonDialog4;
    private javax.swing.JButton cancelRemoveButtonUser;
    private javax.swing.JList<String> contactList;
    private javax.swing.JButton createGroupButtonDialog;
    private javax.swing.JButton createGroupButtonDialog2;
    private javax.swing.JButton createGroupButtonDialog3;
    private javax.swing.JButton createGroupButtonDialog4;
    private javax.swing.JDialog createGroupDialog;
    private javax.swing.JButton emojiButton;
    private javax.swing.JDialog emojiDialog;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JFileChooser jFileChooser;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextArea messageTextArea;
    private javax.swing.JButton removeUserButton;
    private javax.swing.JDialog removeUserDialog;
    private javax.swing.JTextField removeUserDialogTextField;
    private javax.swing.JDialog renameViewGroupDialog;
    private javax.swing.JButton sendButton;
    private javax.swing.JButton sendFileButton;
    private javax.swing.JLabel statusAddUserDialogLabel;
    private javax.swing.JLabel statusRemoveUserDialogLabel1;
    // End of variables declaration//GEN-END:variables

    public String[] emojis = {
            "😀", "😃", "😄", "😁", "😆", "😅", "😂", "🙃", "😉", "😊", "😇", "😍", "😘",
            "😗", "😚", "😙", "😋", "😛", "😜", "😝",
            "😐", "😑", "😶", "😶‍🌫️", "😏", "😒", "😮‍💨", "😌",
            "😔", "😪", "😴", "😷", "😵", "😵‍💫",
            "😎", "😕", "😟", "😮", "😯", "😲", "😳", "😦", "😧",
            "😨", "😰", "😥", "😢", "😭", "😱", "😖", "😣", "😞", "😓", "😩", "😫", "😡", "😠", "😈",
            "👽", "😺", "😸", "😹", "😻", "😼", "😽", "🙀",
            "😿", "😾", "❤",
    };
}
